<!--
  ~ Copyright 2011-12 Aman Kumar
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<idea-plugin version="2" url="https://github.com/stefanschenk/IntelliJBehave">
    <name>JBehave Syntax Support</name>
    <id>jbehave-syntax-support</id>
    <version>1.62</version>
    <vendor url="https://github.com/stefanschenk" email="swj@schenkweb.nl">Stefan Schenk</vendor>
    <description><![CDATA[
    <h1>IntelliJ IDEA Plugin for JBehave</h1>
    <h3>This plugin provides some support for JBehave.</h3>
    <p>
        <b>Highlights (v1.6 and up)</b>
        <ul>
            <li>Supports IntelliJ 2016.1 and up</li>
            <li>Basic completion suggestions for Given Stories</li>
            <li>Added support for Lifecycle keywords</li>
            <li>Improved recognition of GivenStories type and text in a story</li>
        </ul>
    </p>
    <p>
        <b>Description</b><br/>
        It is a fork of Jbehave Support, adapted and updated by Bert Van Vlerken and Victor Rosenberg.<br/>
        See <a href="https://github.com/witspirit/IntelliJBehave">https://github.com/witspirit/IntelliJBehave</a><br/>
        JBehaveSupport in turn is a fork of IntelliJBehave, originally created by Aman Kumar. <br/>
        See <a href="https://github.com/kumaraman21/IntelliJBehave/wiki">https://github.com/kumaraman21/IntelliJBehave/wiki</a>
        <br/>

        JBehave Syntax Support will aim to support IntelliJ IDEA 2016.1 and up and try to improve on features<br/>
        which come from using JBehave on a daily basis.

        Incorporated changes from fork <a href="https://github.com/hobbitProg/IntelliJBehave">https://github.com/hobbitProg/IntelliJBehave</a><br/>
        to support Kotlin 1.0.4.

        JBehave Support had retained most of the original code, but had several improvements been incorporated by various contributors:
        <ul>
            <li><a href="https://github.com/jarosite">https://github.com/jarosite</a></li>
            <li><a href="https://github.com/Arnauld">https://github.com/Arnauld</a></li>
            <li><a href="https://github.com/harley84">https://github.com/harley84</a></li>
            <li><a href="https://github.com/dmalch">https://github.com/dmalch</a></li>
        </ul>
        And <a href="https://github.com/witspirit/IntelliJBehave/graphs/contributors">others</a>.
    </p>

    <p>
        JBehave icon comes from
        <a href="https://github.com/jbehave/jbehave-eclipse/blob/master/org.jbehave.eclipse/icons/bdd-jb-orange-red-green.png">
            https://github.com/jbehave/jbehave-eclipse/blob/master/org.jbehave.eclipse/icons/bdd-jb-orange-red-green.png
        </a>.
    </p>

    <p>
    The plugin provides the following features:
    </p>
    <ul>
    <li> Basic syntax highlighting for JBehave story files</li>
    <li> Jump to step definition in Java or Groovy</li>
    <li> Error Highlighting in story if step was not defined</li>
    <li> Create new story files from a configurable story template</li>
    <li> Comment/uncomment lines in story files</li>
    <li> Code inspections to report unused steps definitions and undefined step usages </li>
    <li> Run *.story files</li>
    <li> Finding usages of steps methods </li>
    </ul>

    <p>
    Known limitations:
    </p>
    <ul>
        <li>Searches complete module classpath, no configuration available to limit scope</li>
        <li>Does not take into account any custom JBehave configuration</li>
    </ul>

    <h2>Release notes:</h2>
    <p>
        New in version 1.62:
    </p>
    <ul>
        <li>In reference to issue #2, added completion suggestions for Lifecycle keywords.</li>
        <li>Added Lifecycle keywords to the Colors & Fonts settings page, so one can set highlighting for these keywords.</li>
        <li>
            In a first attempt for issue #1, added basic support for completion of Given Stories;
            This first implementation searches for story files within the module path, including dependencies and libraries
            and return the list of found files as suggestions. It assumes story files are found within the 'resources' folder.
        </li>
    </ul>
    <p>
        New in version 1.61-b:
    </p>
    <ul>
        <li>Fix for issue #2, added recognition of Lifecycle keywords.</li>
    </ul>
    <p>
        New in version 1.61:
    </p>
    <ul>
        <li>Updated Localized Lexer to handle GivenStories in a story</li>
        <li>Added GivenStories type and GivenStories text to the highlighter and added them to the Colors & Fonts settings page for JBehave</li>
        <li>Changed highlighting of Meta keyword and tags</li>
    </ul>
    <p>
        New in version 1.6:
    </p>
    <ul>
        <li>Java 1.8</li>
        <li>Ready for IntelliJ 2016 and up (use JbehaveSupport for 2015 and earlier)</li>
    </ul>
    <p>
        New in version 1.5:
    </p>
    <ul>
        <li>Ability to find usages of a step method</li>
        <li>Inspections speed has been increased</li>
        <li>JBehave icon has been updated</li>
    </ul>
  ]]></description>

    <idea-version since-build="145.0"/>

    <depends>com.intellij.modules.java</depends>
    <depends optional="true">org.jetbrains.kotlin</depends>

    <application-components>
        <component>
            <implementation-class>com.github.kumaraman21.intellijbehave.template.JBehaveTemplateLoaderComponent
            </implementation-class>
        </component>
        <component>
            <implementation-class>com.github.kumaraman21.intellijbehave.settings.JBehaveSettings</implementation-class>
        </component>
        <component>
            <implementation-class>com.github.kumaraman21.intellijbehave.runner.StoryRunnerConfigurationType
            </implementation-class>
        </component>
    </application-components>

    <project-components>
        <!-- Add your project components here -->
    </project-components>

    <actions>
        <action id="IntelliJBehave.NewJBehaveStory"
                class="com.github.kumaraman21.intellijbehave.creator.CreateStoryAction"
                text="JBehave Story" description="Create New JBehave Story">
            <add-to-group group-id="NewGroup1" anchor="after" relative-to-action="NewClass"/>
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt S"/>
        </action>
        <action id="IntelliJBehave.RunJBehaveStory" class="com.github.kumaraman21.intellijbehave.runner.RunStoryAction"
                text="Run Story" description="Run JBehave Story">
            <add-to-group group-id="RunMenu" anchor="first"/>
            <keyboard-shortcut keymap="$default" first-keystroke="alt shift F8"/>
        </action>
    </actions>

    <extensions defaultExtensionNs="com.intellij">
        <projectConfigurable instance="com.github.kumaraman21.intellijbehave.settings.JBehaveConfigurable"/>
        <spellchecker.support language="Story"
                              implementationClass="com.github.kumaraman21.intellijbehave.spellchecker.JBehaveSpellcheckerStrategy"/>
        <fileTypeFactory implementation="com.github.kumaraman21.intellijbehave.language.StoryFileTypeFactory"/>
        <lang.parserDefinition language="Story"
                               implementationClass="com.github.kumaraman21.intellijbehave.parser.StoryParserDefinition"/>
        <annotator language="Story"
                   implementationClass="com.github.kumaraman21.intellijbehave.resolver.StoryAnnotator"/>
        <lang.commenter language="Story"
                        implementationClass="com.github.kumaraman21.intellijbehave.commenter.StoryCommenter"/>
        <colorSettingsPage implementation="com.github.kumaraman21.intellijbehave.highlighter.StoryColorsAndFontsPage"/>
        <completion.contributor language="Story"
                                implementationClass="com.github.kumaraman21.intellijbehave.completion.StoryCompletionContributor"/>

        <referencesSearch
                implementation="com.github.kumaraman21.intellijbehave.service.JBehaveJavaStepDefinitionSearch"/>
        <methodReferencesSearch
                implementation="com.github.kumaraman21.intellijbehave.service.JBehaveJavaMethodUsageSearcher"/>
        <!--code inspections-->
        <localInspection id="unusedStepDeclaration" language="JAVA" displayName="Unused step declaration"
                         groupName="JBehave" enabledByDefault="false" level="WARNING"
                         implementationClass="com.github.kumaraman21.intellijbehave.codeInspector.UnusedStepDeclarationInspection"/>
        <localInspection id="undefinedStep" language="Story" displayName="Undefined step"
                         groupName="JBehave" enabledByDefault="true" level="WARNING"
                         implementationClass="com.github.kumaraman21.intellijbehave.codeInspector.UndefinedStepInspection"/>

        <psi.referenceContributor
                implementation="com.github.kumaraman21.intellijbehave.resolver.GivenStoryPsiReferenceContributor"/>
        <psi.referenceContributor
                implementation="com.github.kumaraman21.intellijbehave.resolver.StepPsiReferenceContributor"/>

        <projectService serviceInterface="com.github.kumaraman21.intellijbehave.service.JBehaveStepsIndex"
                        serviceImplementation="com.github.kumaraman21.intellijbehave.service.JBehaveStepsIndex"/>

        <configurationType implementation="com.github.kumaraman21.intellijbehave.run.configuration.JBehaveConfigurationType" />
        <codeInsight.lineMarkerProvider language="Story" implementationClass="com.github.kumaraman21.intellijbehave.run.configuration.JBehaveLineMarkerProvider"/>
    </extensions>
</idea-plugin>